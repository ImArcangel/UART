// File: ./build/dut.v
// Generated by MyHDL 0.10
// Date: Tue Dec 11 13:00:12 2018


`timescale 1ns/10ps

module dut (
    clk_i,
    rst_i,
    rx_i,
    tx_o,
    anodos_o,
    segmentos_o
);


input clk_i;
input rst_i;
input rx_i;
output tx_o;
reg tx_o;
output [3:0] anodos_o;
reg [3:0] anodos_o;
output [7:0] segmentos_o;
reg [7:0] segmentos_o;

wire [10:0] value;
wire [7:0] dat;
reg tx_start;
reg tx_ready;
reg [0:0] state;
reg rx_ready;
wire [7:0] rx_dat;
wire full;
wire empty;
reg dequeue;
reg UART1_tx_tick;
reg UART1_rx_tick;
reg [3:0] UART1_clk_div1_counter8;
reg [2:0] UART1_clk_div1_counter;
reg [0:0] UART1_uart_tx1_state;
reg [7:0] UART1_uart_tx1_data;
reg [3:0] UART1_uart_tx1_cnt;
reg [1:0] UART1_uart_rx1_state;
reg [2:0] UART1_uart_rx1_rx_sync;
wire UART1_uart_rx1_rx_r;
reg UART1_uart_rx1_nxt_bit;
reg [7:0] UART1_uart_rx1_dat_r;
reg [1:0] UART1_uart_rx1_bit_start;
reg [2:0] UART1_uart_rx1_bit_spacing;
reg [2:0] UART1_uart_rx1_bit_cnt;
reg [7:0] FIFO1_ram_dat_o;
reg [9:0] FIFO1_enqueue_ptr;
reg [9:0] FIFO1_dequeue_ptr;
wire FIFO1__full;
wire FIFO1__enqueue;
wire FIFO1__empty;
wire FIFO1__dequeue;
reg [10:0] FIFO1__count;
reg driver7seg1_tick;
reg [3:0] driver7seg1_thousand;
reg [3:0] driver7seg1_ten;
reg [3:0] driver7seg1_one;
reg [3:0] driver7seg1_hundred;
reg [15:0] driver7seg1_counter;
reg [3:0] driver7seg1_anodos;
reg [7:0] FIFO1_RAM_DP1__ram [0:1024-1];
reg [26:0] driver7seg1_bin2bcd1_shift [0:12-1];



always @(posedge clk_i) begin: DUT_UART1_CLK_DIV1_COUNTER_PROC
    if (rst_i == 1) begin
        UART1_clk_div1_counter <= 0;
    end
    else begin
        if ((UART1_clk_div1_counter8 == 0)) begin
            UART1_clk_div1_counter <= (UART1_clk_div1_counter + 1);
        end
    end
end


always @(posedge clk_i) begin: DUT_UART1_CLK_DIV1_COUNTER16_PROC
    if (rst_i == 1) begin
        UART1_clk_div1_counter8 <= 0;
    end
    else begin
        if (($signed({1'b0, UART1_clk_div1_counter8}) == (13 - 1))) begin
            UART1_clk_div1_counter8 <= 0;
        end
        else begin
            UART1_clk_div1_counter8 <= (UART1_clk_div1_counter8 + 1);
        end
    end
end


always @(posedge clk_i) begin: DUT_UART1_CLK_DIV1_UART_TICK_PROC
    if (rst_i == 1) begin
        UART1_tx_tick <= 0;
        UART1_rx_tick <= 0;
    end
    else begin
        UART1_rx_tick <= (UART1_clk_div1_counter8 == 0);
        UART1_tx_tick <= ((UART1_clk_div1_counter == 0) && UART1_rx_tick);
    end
end


always @(posedge clk_i) begin: DUT_UART1_UART_TX1_TX_STATE_M
    if (rst_i == 1) begin
        UART1_uart_tx1_state <= 1'b0;
        UART1_uart_tx1_data <= 0;
        tx_ready <= 0;
        UART1_uart_tx1_cnt <= 0;
        tx_o <= 0;
    end
    else begin
        case (UART1_uart_tx1_state)
            1'b0: begin
                tx_ready <= 1;
                if (tx_start) begin
                    UART1_uart_tx1_data <= dat;
                    tx_ready <= 0;
                    UART1_uart_tx1_state <= 1'b1;
                end
                else begin
                    tx_o <= 1;
                end
            end
            1'b1: begin
                if (UART1_tx_tick) begin
                    if (((UART1_uart_tx1_cnt >= 1) && (UART1_uart_tx1_cnt <= 8))) begin
                        tx_o <= UART1_uart_tx1_data[0];
                        UART1_uart_tx1_data <= {1'b0, UART1_uart_tx1_data[8-1:1]};
                        UART1_uart_tx1_cnt <= (UART1_uart_tx1_cnt + 1);
                    end
                    else begin
                        tx_o <= 0;
                        UART1_uart_tx1_cnt <= (UART1_uart_tx1_cnt + 1);
                    end
                    if ((UART1_uart_tx1_cnt == 9)) begin
                        tx_o <= 1;
                        tx_ready <= 1;
                        UART1_uart_tx1_state <= 1'b0;
                        UART1_uart_tx1_cnt <= 0;
                    end
                end
            end
            default: begin
                UART1_uart_tx1_state <= 1'b0;
            end
        endcase
    end
end


always @(posedge clk_i) begin: DUT_UART1_UART_RX1_RX_SYNC_PROC
    if (rst_i == 1) begin
        UART1_uart_rx1_rx_sync <= 7;
    end
    else begin
        if (UART1_rx_tick) begin
            UART1_uart_rx1_rx_sync <= {UART1_uart_rx1_rx_sync[2-1:0], rx_i};
        end
    end
end



assign UART1_uart_rx1_rx_r = ((UART1_uart_rx1_rx_sync == 7) || (UART1_uart_rx1_rx_sync == 3) || (UART1_uart_rx1_rx_sync == 5) || (UART1_uart_rx1_rx_sync == 6));
assign rx_dat = UART1_uart_rx1_dat_r;


always @(posedge clk_i) begin: DUT_UART1_UART_RX1_NXT_BIT_PROC
    if (rst_i == 1) begin
        UART1_uart_rx1_bit_spacing <= 0;
        UART1_uart_rx1_nxt_bit <= 0;
    end
    else begin
        UART1_uart_rx1_nxt_bit <= ($signed({1'b0, UART1_uart_rx1_bit_spacing}) == (8 - 1));
        if ((UART1_rx_tick && (UART1_uart_rx1_state != 2'b00))) begin
            UART1_uart_rx1_bit_spacing <= (UART1_uart_rx1_bit_spacing + 1);
        end
    end
end


always @(posedge clk_i) begin: DUT_UART1_UART_RX1_START_BIT_PROC
    if (rst_i == 1) begin
        UART1_uart_rx1_bit_start <= 0;
    end
    else begin
        if (((UART1_uart_rx1_state == 2'b00) && (!UART1_uart_rx1_rx_r))) begin
            UART1_uart_rx1_bit_start <= (UART1_uart_rx1_bit_start + UART1_rx_tick);
        end
        else begin
            UART1_uart_rx1_bit_start <= 0;
        end
    end
end


always @(posedge clk_i) begin: DUT_UART1_UART_RX1_FSM_PROC
    if (rst_i == 1) begin
        rx_ready <= 0;
        UART1_uart_rx1_bit_cnt <= 0;
        UART1_uart_rx1_state <= 2'b00;
        UART1_uart_rx1_dat_r <= 0;
    end
    else begin
        rx_ready <= 1'b0;
        if (UART1_rx_tick) begin
            case (UART1_uart_rx1_state)
                2'b00: begin
                    if (((!UART1_uart_rx1_rx_r) && (UART1_uart_rx1_bit_start == 2'h3))) begin
                        UART1_uart_rx1_state <= 2'b01;
                    end
                end
                2'b01: begin
                    if (UART1_uart_rx1_nxt_bit) begin
                        UART1_uart_rx1_dat_r <= {UART1_uart_rx1_rx_r, UART1_uart_rx1_dat_r[8-1:1]};
                        UART1_uart_rx1_bit_cnt <= (UART1_uart_rx1_bit_cnt + 1);
                        if ((UART1_uart_rx1_bit_cnt == 7)) begin
                            UART1_uart_rx1_state <= 2'b10;
                        end
                    end
                end
                2'b10: begin
                    if (UART1_uart_rx1_nxt_bit) begin
                        UART1_uart_rx1_state <= 2'b00;
                        rx_ready <= 1'b1;
                    end
                end
                default: begin
                    UART1_uart_rx1_state <= 2'b00;
                end
            endcase
        end
    end
end


always @(posedge clk_i) begin: DUT_FIFO1_RAM_DP1_RAM_PROC
    if (FIFO1__enqueue) begin
        FIFO1_RAM_DP1__ram[FIFO1_enqueue_ptr] <= rx_dat;
    end
    FIFO1_ram_dat_o <= FIFO1_RAM_DP1__ram[FIFO1_dequeue_ptr];
end



assign value = FIFO1__count;
assign empty = FIFO1__empty;
assign full = FIFO1__full;
assign dat = FIFO1__empty ? rx_dat : FIFO1_ram_dat_o;



assign FIFO1__empty = (FIFO1__count == 0);
assign FIFO1__full = FIFO1__count[10];



assign FIFO1__enqueue = ((!FIFO1__full) && rx_ready);
assign FIFO1__dequeue = ((!FIFO1__empty) && dequeue);

// verilator lint_off WIDTH 
always @(posedge clk_i) begin: DUT_FIFO1_ADDR_PTR_PROC
    if (rst_i == 1) begin
        FIFO1_enqueue_ptr <= 0;
        FIFO1__count <= 0;
        FIFO1_dequeue_ptr <= 0;
    end
    else begin
        FIFO1_enqueue_ptr <= (FIFO1_enqueue_ptr + FIFO1__enqueue);
        FIFO1_dequeue_ptr <= (FIFO1_dequeue_ptr + FIFO1__dequeue);
        FIFO1__count <= ((FIFO1__count + FIFO1__enqueue) - FIFO1__dequeue);
        // verilator lint_on WIDTH 
    end
end

// verilator lint_off WIDTH 
always @(posedge clk_i) begin: DUT_DRIVER7SEG1_BIN2BCD1_DECOMP_PROC
    integer i;
    integer thousand;
    integer hundred;
    integer ten;
    integer one;
    if (rst_i == 1) begin
        driver7seg1_bin2bcd1_shift[0] <= 0;
        driver7seg1_bin2bcd1_shift[1] <= 0;
        driver7seg1_bin2bcd1_shift[2] <= 0;
        driver7seg1_bin2bcd1_shift[3] <= 0;
        driver7seg1_bin2bcd1_shift[4] <= 0;
        driver7seg1_bin2bcd1_shift[5] <= 0;
        driver7seg1_bin2bcd1_shift[6] <= 0;
        driver7seg1_bin2bcd1_shift[7] <= 0;
        driver7seg1_bin2bcd1_shift[8] <= 0;
        driver7seg1_bin2bcd1_shift[9] <= 0;
        driver7seg1_bin2bcd1_shift[10] <= 0;
        driver7seg1_bin2bcd1_shift[11] <= 0;
    end
    else begin
        driver7seg1_bin2bcd1_shift[0] <= value;
        for (i=0; i<11; i=i+1) begin
            thousand = (driver7seg1_bin2bcd1_shift[i][(11 + 16)-1:(11 + 12)] + 3);
            hundred = (driver7seg1_bin2bcd1_shift[i][(11 + 12)-1:(11 + 8)] + 3);
            ten = (driver7seg1_bin2bcd1_shift[i][(11 + 8)-1:(11 + 4)] + 3);
            one = (driver7seg1_bin2bcd1_shift[i][(11 + 4)-1:11] + 3);
            driver7seg1_bin2bcd1_shift[(i + 1)] <= ({(driver7seg1_bin2bcd1_shift[i][(11 + 16)-1:(11 + 12)] < 5) ? driver7seg1_bin2bcd1_shift[i][(11 + 16)-1:(11 + 12)] : thousand[4-1:0], (driver7seg1_bin2bcd1_shift[i][(11 + 12)-1:(11 + 8)] < 5) ? driver7seg1_bin2bcd1_shift[i][(11 + 12)-1:(11 + 8)] : hundred[4-1:0], (driver7seg1_bin2bcd1_shift[i][(11 + 8)-1:(11 + 4)] < 5) ? driver7seg1_bin2bcd1_shift[i][(11 + 8)-1:(11 + 4)] : ten[4-1:0], (driver7seg1_bin2bcd1_shift[i][(11 + 4)-1:11] < 5) ? driver7seg1_bin2bcd1_shift[i][(11 + 4)-1:11] : one[4-1:0], driver7seg1_bin2bcd1_shift[i][11-1:0]} << 1);
        end
        // verilator lint_on WIDTH 
    end
end


always @(posedge clk_i) begin: DUT_DRIVER7SEG1_BIN2BCD1_ASSIGN_PROC
    if (rst_i == 1) begin
        driver7seg1_hundred <= 0;
        driver7seg1_thousand <= 0;
        driver7seg1_one <= 0;
        driver7seg1_ten <= 0;
    end
    else begin
        driver7seg1_thousand <= driver7seg1_bin2bcd1_shift[11][(11 + 16)-1:(11 + 12)];
        driver7seg1_hundred <= driver7seg1_bin2bcd1_shift[11][(11 + 12)-1:(11 + 8)];
        driver7seg1_ten <= driver7seg1_bin2bcd1_shift[11][(11 + 8)-1:(11 + 4)];
        driver7seg1_one <= driver7seg1_bin2bcd1_shift[11][(11 + 4)-1:11];
    end
end


always @(posedge clk_i) begin: DUT_DRIVER7SEG1_CNT_ANODOS_PROC
    if (rst_i == 1) begin
        driver7seg1_tick <= 0;
        driver7seg1_counter <= 0;
    end
    else begin
        if (($signed({1'b0, driver7seg1_counter}) == (50000 - 1))) begin
            driver7seg1_counter <= 0;
            driver7seg1_tick <= 1'b1;
        end
        else begin
            driver7seg1_counter <= (driver7seg1_counter + 1);
            driver7seg1_tick <= 1'b0;
        end
    end
end


always @(posedge clk_i) begin: DUT_DRIVER7SEG1_ANODOS_PROC
    if (rst_i == 1) begin
        driver7seg1_anodos <= 1;
    end
    else begin
        if (driver7seg1_tick) begin
            driver7seg1_anodos <= {driver7seg1_anodos[3-1:0], driver7seg1_anodos[3]};
        end
    end
end


always @(driver7seg1_ten, driver7seg1_one, driver7seg1_anodos, driver7seg1_hundred, driver7seg1_thousand) begin: DUT_DRIVER7SEG1_SEGMENTOS_PROC
    anodos_o = driver7seg1_anodos;
    case (driver7seg1_anodos)
        'h1: begin
            case (driver7seg1_one)
                0: segmentos_o = 3;
                1: segmentos_o = 159;
                2: segmentos_o = 37;
                3: segmentos_o = 13;
                4: segmentos_o = 153;
                5: segmentos_o = 73;
                6: segmentos_o = 65;
                7: segmentos_o = 31;
                8: segmentos_o = 1;
                9: segmentos_o = 9;
                10: segmentos_o = 17;
                11: segmentos_o = 193;
                12: segmentos_o = 99;
                13: segmentos_o = 133;
                14: segmentos_o = 97;
                default: segmentos_o = 113;
            endcase
        end
        'h2: begin
            case (driver7seg1_ten)
                0: segmentos_o = 3;
                1: segmentos_o = 159;
                2: segmentos_o = 37;
                3: segmentos_o = 13;
                4: segmentos_o = 153;
                5: segmentos_o = 73;
                6: segmentos_o = 65;
                7: segmentos_o = 31;
                8: segmentos_o = 1;
                9: segmentos_o = 9;
                10: segmentos_o = 17;
                11: segmentos_o = 193;
                12: segmentos_o = 99;
                13: segmentos_o = 133;
                14: segmentos_o = 97;
                default: segmentos_o = 113;
            endcase
        end
        'h4: begin
            case (driver7seg1_hundred)
                0: segmentos_o = 3;
                1: segmentos_o = 159;
                2: segmentos_o = 37;
                3: segmentos_o = 13;
                4: segmentos_o = 153;
                5: segmentos_o = 73;
                6: segmentos_o = 65;
                7: segmentos_o = 31;
                8: segmentos_o = 1;
                9: segmentos_o = 9;
                10: segmentos_o = 17;
                11: segmentos_o = 193;
                12: segmentos_o = 99;
                13: segmentos_o = 133;
                14: segmentos_o = 97;
                default: segmentos_o = 113;
            endcase
        end
        'h8: begin
            case (driver7seg1_thousand)
                0: segmentos_o = 3;
                1: segmentos_o = 159;
                2: segmentos_o = 37;
                3: segmentos_o = 13;
                4: segmentos_o = 153;
                5: segmentos_o = 73;
                6: segmentos_o = 65;
                7: segmentos_o = 31;
                8: segmentos_o = 1;
                9: segmentos_o = 9;
                10: segmentos_o = 17;
                11: segmentos_o = 193;
                12: segmentos_o = 99;
                13: segmentos_o = 133;
                14: segmentos_o = 97;
                default: segmentos_o = 113;
            endcase
        end
        default: begin
            segmentos_o = 255;
        end
    endcase
end


always @(posedge clk_i) begin: DUT_L_STATE_M
    if (rst_i == 1) begin
        dequeue <= 0;
        tx_start <= 0;
        state <= 1'b0;
    end
    else begin
        case (state)
            1'b0: begin
                if (rx_ready) begin
                    if (((rx_dat == 10) || full)) begin
                        state <= 1'b1;
                    end
                end
            end
            1'b1: begin
                if ((!empty)) begin
                    dequeue <= 0;
                    tx_start <= 0;
                end
                if (empty) begin
                    state <= 1'b0;
                end
                else if ((tx_ready && (!dequeue))) begin
                    dequeue <= 1;
                    tx_start <= 1;
                end
            end
            default: begin
                state <= 1'b1;
            end
        endcase
    end
end

endmodule
